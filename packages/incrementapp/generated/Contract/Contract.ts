// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class NewReserves extends ethereum.Event {
  get params(): NewReserves__Params {
    return new NewReserves__Params(this);
  }
}

export class NewReserves__Params {
  _event: NewReserves;

  constructor(event: NewReserves) {
    this._event = event;
  }

  get vUSD(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vEUR(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class buyEURUSDlong extends ethereum.Event {
  get params(): buyEURUSDlong__Params {
    return new buyEURUSDlong__Params(this);
  }
}

export class buyEURUSDlong__Params {
  _event: buyEURUSDlong;

  constructor(event: buyEURUSDlong) {
    this._event = event;
  }

  get notional(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get eurlong(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class buyEURUSDshort extends ethereum.Event {
  get params(): buyEURUSDshort__Params {
    return new buyEURUSDshort__Params(this);
  }
}

export class buyEURUSDshort__Params {
  _event: buyEURUSDshort;

  constructor(event: buyEURUSDshort) {
    this._event = event;
  }

  get notional(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get eurshort(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class sellEURUSDlong extends ethereum.Event {
  get params(): sellEURUSDlong__Params {
    return new sellEURUSDlong__Params(this);
  }
}

export class sellEURUSDlong__Params {
  _event: sellEURUSDlong;

  constructor(event: sellEURUSDlong) {
    this._event = event;
  }

  get eurlong(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reserve(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class sellEURUSDshort extends ethereum.Event {
  get params(): sellEURUSDshort__Params {
    return new sellEURUSDshort__Params(this);
  }
}

export class sellEURUSDshort__Params {
  _event: sellEURUSDshort;

  constructor(event: sellEURUSDshort) {
    this._event = event;
  }

  get eurshort(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reserve(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Contract__getPoolInfoResultValue0Struct extends ethereum.Tuple {
  get vEUR(): BigInt {
    return this[0].toBigInt();
  }

  get vUSD(): BigInt {
    return this[1].toBigInt();
  }

  get totalAssetReserve(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }
}

export class Contract__getUnrealizedPnLResultValue0Struct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get isPositive(): boolean {
    return this[1].toBoolean();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  MintLongEUR(_amount: BigInt): BigInt {
    let result = super.call("MintLongEUR", "MintLongEUR(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBigInt();
  }

  try_MintLongEUR(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MintLongEUR",
      "MintLongEUR(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MintLongWithLeverage(_leverage: i32): BigInt {
    let result = super.call(
      "MintLongWithLeverage",
      "MintLongWithLeverage(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_leverage))]
    );

    return result[0].toBigInt();
  }

  try_MintLongWithLeverage(_leverage: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MintLongWithLeverage",
      "MintLongWithLeverage(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_leverage))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MintShortEUR(_amount: BigInt): BigInt {
    let result = super.call("MintShortEUR", "MintShortEUR(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBigInt();
  }

  try_MintShortEUR(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MintShortEUR",
      "MintShortEUR(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MintShortWithLeverage(_leverage: i32): BigInt {
    let result = super.call(
      "MintShortWithLeverage",
      "MintShortWithLeverage(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_leverage))]
    );

    return result[0].toBigInt();
  }

  try_MintShortWithLeverage(_leverage: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MintShortWithLeverage",
      "MintShortWithLeverage(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_leverage))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  RedeemLongEUR(_amount: BigInt, _redeemAsset: Address): BigInt {
    let result = super.call(
      "RedeemLongEUR",
      "RedeemLongEUR(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_redeemAsset)
      ]
    );

    return result[0].toBigInt();
  }

  try_RedeemLongEUR(
    _amount: BigInt,
    _redeemAsset: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "RedeemLongEUR",
      "RedeemLongEUR(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_redeemAsset)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  RedeemShortEUR(_amount: BigInt, _redeemAsset: Address): BigInt {
    let result = super.call(
      "RedeemShortEUR",
      "RedeemShortEUR(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_redeemAsset)
      ]
    );

    return result[0].toBigInt();
  }

  try_RedeemShortEUR(
    _amount: BigInt,
    _redeemAsset: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "RedeemShortEUR",
      "RedeemShortEUR(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_redeemAsset)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _TOKENS_(param0: BigInt): Address {
    let result = super.call("_TOKENS_", "_TOKENS_(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try__TOKENS_(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("_TOKENS_", "_TOKENS_(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowWithdrawal(account: Address, _token: Address, _amount: BigInt): boolean {
    let result = super.call(
      "allowWithdrawal",
      "allowWithdrawal(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_allowWithdrawal(
    account: Address,
    _token: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowWithdrawal",
      "allowWithdrawal(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAssetOracle(_asset: Address): Address {
    let result = super.call(
      "getAssetOracle",
      "getAssetOracle(address):(address)",
      [ethereum.Value.fromAddress(_asset)]
    );

    return result[0].toAddress();
  }

  try_getAssetOracle(_asset: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAssetOracle",
      "getAssetOracle(address):(address)",
      [ethereum.Value.fromAddress(_asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAssetPrice(_oracleAddress: Address): BigInt {
    let result = super.call(
      "getAssetPrice",
      "getAssetPrice(address):(uint256)",
      [ethereum.Value.fromAddress(_oracleAddress)]
    );

    return result[0].toBigInt();
  }

  try_getAssetPrice(_oracleAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAssetPrice",
      "getAssetPrice(address):(uint256)",
      [ethereum.Value.fromAddress(_oracleAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAssetPriceByTokenAddress(_tokenAddress: Address): BigInt {
    let result = super.call(
      "getAssetPriceByTokenAddress",
      "getAssetPriceByTokenAddress(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_getAssetPriceByTokenAddress(
    _tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAssetPriceByTokenAddress",
      "getAssetPriceByTokenAddress(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAssetValue(account: Address, token: Address): BigInt {
    let result = super.call(
      "getAssetValue",
      "getAssetValue(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getAssetValue(
    account: Address,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAssetValue",
      "getAssetValue(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEUROracle(): Address {
    let result = super.call("getEUROracle", "getEUROracle():(address)", []);

    return result[0].toAddress();
  }

  try_getEUROracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("getEUROracle", "getEUROracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLongBalance(account: Address): BigInt {
    let result = super.call(
      "getLongBalance",
      "getLongBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getLongBalance(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLongBalance",
      "getLongBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolInfo(): Contract__getPoolInfoResultValue0Struct {
    let result = super.call(
      "getPoolInfo",
      "getPoolInfo():((uint256,uint256,uint256,uint256))",
      []
    );

    return result[0].toTuple() as Contract__getPoolInfoResultValue0Struct;
  }

  try_getPoolInfo(): ethereum.CallResult<
    Contract__getPoolInfoResultValue0Struct
  > {
    let result = super.tryCall(
      "getPoolInfo",
      "getPoolInfo():((uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__getPoolInfoResultValue0Struct
    );
  }

  getPortfolioValue(account: Address): BigInt {
    let result = super.call(
      "getPortfolioValue",
      "getPortfolioValue(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getPortfolioValue(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPortfolioValue",
      "getPortfolioValue(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveAssets(): Array<Address> {
    let result = super.call(
      "getReserveAssets",
      "getReserveAssets():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getReserveAssets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getReserveAssets",
      "getReserveAssets():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getReserveBalance(account: Address, _token: Address): BigInt {
    let result = super.call(
      "getReserveBalance",
      "getReserveBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getReserveBalance(
    account: Address,
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveBalance",
      "getReserveBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getShortBalance(account: Address): BigInt {
    let result = super.call(
      "getShortBalance",
      "getShortBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getShortBalance(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getShortBalance",
      "getShortBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnrealizedPnL(
    account: Address
  ): Contract__getUnrealizedPnLResultValue0Struct {
    let result = super.call(
      "getUnrealizedPnL",
      "getUnrealizedPnL(address):((uint256,bool))",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toTuple() as Contract__getUnrealizedPnLResultValue0Struct;
  }

  try_getUnrealizedPnL(
    account: Address
  ): ethereum.CallResult<Contract__getUnrealizedPnLResultValue0Struct> {
    let result = super.tryCall(
      "getUnrealizedPnL",
      "getUnrealizedPnL(address):((uint256,bool))",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Contract__getUnrealizedPnLResultValue0Struct
    );
  }

  getUserMarginRatio(account: Address): BigInt {
    let result = super.call(
      "getUserMarginRatio",
      "getUserMarginRatio(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getUserMarginRatio(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserMarginRatio",
      "getUserMarginRatio(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserNotional(account: Address): BigInt {
    let result = super.call(
      "getUserNotional",
      "getUserNotional(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getUserNotional(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserNotional",
      "getUserNotional(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _quoteAssetReserve(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _baseAssetReserve(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _euroOracleAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _reserveTokens(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get _reserveOracles(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get _isAaveToken(): Array<boolean> {
    return this._call.inputValues[5].value.toBooleanArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class MintLongEURCall extends ethereum.Call {
  get inputs(): MintLongEURCall__Inputs {
    return new MintLongEURCall__Inputs(this);
  }

  get outputs(): MintLongEURCall__Outputs {
    return new MintLongEURCall__Outputs(this);
  }
}

export class MintLongEURCall__Inputs {
  _call: MintLongEURCall;

  constructor(call: MintLongEURCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintLongEURCall__Outputs {
  _call: MintLongEURCall;

  constructor(call: MintLongEURCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintLongWithLeverageCall extends ethereum.Call {
  get inputs(): MintLongWithLeverageCall__Inputs {
    return new MintLongWithLeverageCall__Inputs(this);
  }

  get outputs(): MintLongWithLeverageCall__Outputs {
    return new MintLongWithLeverageCall__Outputs(this);
  }
}

export class MintLongWithLeverageCall__Inputs {
  _call: MintLongWithLeverageCall;

  constructor(call: MintLongWithLeverageCall) {
    this._call = call;
  }

  get _leverage(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class MintLongWithLeverageCall__Outputs {
  _call: MintLongWithLeverageCall;

  constructor(call: MintLongWithLeverageCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintShortEURCall extends ethereum.Call {
  get inputs(): MintShortEURCall__Inputs {
    return new MintShortEURCall__Inputs(this);
  }

  get outputs(): MintShortEURCall__Outputs {
    return new MintShortEURCall__Outputs(this);
  }
}

export class MintShortEURCall__Inputs {
  _call: MintShortEURCall;

  constructor(call: MintShortEURCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintShortEURCall__Outputs {
  _call: MintShortEURCall;

  constructor(call: MintShortEURCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintShortWithLeverageCall extends ethereum.Call {
  get inputs(): MintShortWithLeverageCall__Inputs {
    return new MintShortWithLeverageCall__Inputs(this);
  }

  get outputs(): MintShortWithLeverageCall__Outputs {
    return new MintShortWithLeverageCall__Outputs(this);
  }
}

export class MintShortWithLeverageCall__Inputs {
  _call: MintShortWithLeverageCall;

  constructor(call: MintShortWithLeverageCall) {
    this._call = call;
  }

  get _leverage(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class MintShortWithLeverageCall__Outputs {
  _call: MintShortWithLeverageCall;

  constructor(call: MintShortWithLeverageCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemLongEURCall extends ethereum.Call {
  get inputs(): RedeemLongEURCall__Inputs {
    return new RedeemLongEURCall__Inputs(this);
  }

  get outputs(): RedeemLongEURCall__Outputs {
    return new RedeemLongEURCall__Outputs(this);
  }
}

export class RedeemLongEURCall__Inputs {
  _call: RedeemLongEURCall;

  constructor(call: RedeemLongEURCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _redeemAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RedeemLongEURCall__Outputs {
  _call: RedeemLongEURCall;

  constructor(call: RedeemLongEURCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemShortEURCall extends ethereum.Call {
  get inputs(): RedeemShortEURCall__Inputs {
    return new RedeemShortEURCall__Inputs(this);
  }

  get outputs(): RedeemShortEURCall__Outputs {
    return new RedeemShortEURCall__Outputs(this);
  }
}

export class RedeemShortEURCall__Inputs {
  _call: RedeemShortEURCall;

  constructor(call: RedeemShortEURCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _redeemAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RedeemShortEURCall__Outputs {
  _call: RedeemShortEURCall;

  constructor(call: RedeemShortEURCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetReserveTokensCall extends ethereum.Call {
  get inputs(): SetReserveTokensCall__Inputs {
    return new SetReserveTokensCall__Inputs(this);
  }

  get outputs(): SetReserveTokensCall__Outputs {
    return new SetReserveTokensCall__Outputs(this);
  }
}

export class SetReserveTokensCall__Inputs {
  _call: SetReserveTokensCall;

  constructor(call: SetReserveTokensCall) {
    this._call = call;
  }

  get _assets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _oracles(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _isAaveToken(): Array<boolean> {
    return this._call.inputValues[2].value.toBooleanArray();
  }
}

export class SetReserveTokensCall__Outputs {
  _call: SetReserveTokensCall;

  constructor(call: SetReserveTokensCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
